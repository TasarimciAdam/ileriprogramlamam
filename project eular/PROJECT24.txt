/**
 * @param {number} n
 * @return {string[][]}
 */
var getNthLexicographicPermutation = function(sortedAvailableDigits, n){
    var length = sortedAvailableDigits.length;
    if(length == 1){
        return (n == 1) ? sortedAvailableDigits[0] : null;
    }
    
    var combinationsWithoutFirstDigit = 1;
    for(var i = 2; i < length; i++){
        combinationsWithoutFirstDigit *= i;
    }
    
    var firstDigitIndex = Math.floor((n-1) / combinationsWithoutFirstDigit);
    if(firstDigitIndex >= length){
        return null;
    }
    return sortedAvailableDigits.splice(firstDigitIndex, 1) + getNthLexicographicPermutation(sortedAvailableDigits, n - (firstDigitIndex * combinationsWithoutFirstDigit));
};

var digits = ['0', '1', '2'];


console.log(getNthLexicographicPermutation(digits, 6));

digits_0_9 = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];

console.log(getNthLexicographicPermutation(digits_0_9, 1000000));

--------------------------------------------------------------------------------------------------

/**
 * @param {number} n
 * @return {string[][]}
 */
function permutate(n, array) {
  const al = array.length
  for (let i = 0; i < n - 1; i++) {
    let k, l
    for (let j = 0; j < al - 1; j++) {
      if (array[j] < array[j + 1]) {
        k = j
      }
    }
    for (let j = k; j < al; j++) {
      if (array[k] < array[j]) {
        l = j
      }
    }
    let tmp = array[k]
    array[k] = array[l]
    array[l] = tmp
    let begin = k + 1
    let end = al - 1
    while (begin < end) {
      tmp = array[begin]
      array[begin] = array[end]
      array[end] = tmp
      begin += 1
      end -= 1
    }
  }
  return array
}
console.log(permutate(1000000, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]).join(""))